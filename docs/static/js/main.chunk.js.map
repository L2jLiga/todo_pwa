{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this","this","react_default","a","createElement","className","type","checked","props","todo","completed","onChange","toggle","id","join","title","React","Component","Header","login","xlinkHref","aria-label","role","onClick","logOut","Login","_this2","placeholder","document","getElementById","value","Content","state","todos","fetchTodos","_this4","fetch","SERVER_URL","then","res","json","obj","setState","result","_this5","localforage","getItem","val","text","_this6","getLatestTodos","postTodos","Object","toConsumableArray","concat","length","setItem","navigator","serviceWorker","ready","swRegistration","sync","register","catch","console","error","todoID","_this7","newTodos","map","_this8","filter","t","App_TodoItem","key","toggleTodo","bind","addTodo","App","_React$Component4","_getPrototypeOf3","_this9","classCallCheck","_len2","arguments","args","Array","_key2","possibleConstructorReturn","getPrototypeOf","call","apply","inherits","createClass","_this10","clear","App_Header","App_Content","App_Login","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","App_App","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["import localforage from 'localforage';\nimport React from 'react';\n\nconst SERVER_URL = 'https://www.jsonstore.io/c1e61fddba68a34eb79eeb97fc56d72df86092d86ad5def5dc25a7252e6cf382';\n\nclass TodoItem extends React.Component {\n    render() {\n        return (\n            <div className=\"todo\">\n                <input className=\"todoCheck\"\n                       type=\"checkbox\"\n                       checked={this.props.todo.completed}\n                       onChange={() => this.props.toggle(this.props.todo.id)}/>\n                <span className={['todoText', this.props.todo.completed ? 'todoChecked' : ''].join(' ')}>\n\t\t\t\t\t{this.props.todo.title}\n\t\t\t\t</span>\n            </div>\n        );\n    }\n}\n\nconst Header = (props) => (\n    <header>\n        <h1 className=\"title\">TODO</h1>\n        {props.login &&\n        <div className=\"icons\">\n            <svg className=\"feather\">\n                <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#bell-off\"/>\n            </svg>\n            <svg className=\"feather log-out\"\n                 aria-label=\"Logout\"\n                 role=\"button\"\n                 onClick={props.logOut}>\n                <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#log-out\"/>\n            </svg>\n        </div>}\n    </header>\n);\n\nclass Login extends React.Component {\n    render() {\n        return (\n            <div className=\"loginScreen\">\n                <h2 className=\"loginLabel\">Enter user name</h2>\n                <div className=\"loginControls\">\n                    <input type=\"text\"\n                           id=\"username\"\n                           placeholder=\"Avi\"/>\n                    <svg className=\"feather right-arrow login-button\"\n                         aria-label=\"Login\"\n                         role=\"button\"\n                         onClick={() => this.props.login(document.getElementById('username').value)}>\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\"/>\n                    </svg>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Content extends React.Component {\n    state = {todos: []};\n\n    componentDidMount() {\n        this.fetchTodos();\n    }\n\n    fetchTodos() {\n        fetch(SERVER_URL + '/todos/' + this.props.login).then(res => res.json()).then(obj => {\n            this.setState({todos: obj.result || []});\n        });\n    }\n\n    getLatestTodos() {\n        return localforage.getItem('todos').then(val => {\n            return val || this.state.todos;\n        });\n    }\n\n    addTodo(text) {\n        this.getLatestTodos().then(todos => {\n            this.postTodos([...todos, {title: text, completed: false, id: todos.length + 1}]);\n        });\n        document.getElementById('todoText').value = '';\n    }\n\n    postTodos(todos) {\n        localforage.setItem('todos', todos).then(() => {\n            navigator.serviceWorker.ready.then(swRegistration => {\n                return swRegistration.sync.register('sync');\n            });\n        }).catch(console.error);\n        // allow UI change\n        // better way use messages http://craig-russell.co.uk/2016/01/29/service-worker-messaging.html\n        this.setState({todos});\n    }\n\n    toggleTodo(todoID) {\n        this.getLatestTodos().then(todos => {\n            let newTodos = todos.map(todo => {\n                if (todo.id === todoID) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            });\n            this.postTodos(newTodos);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <div className=\"todoItems\">\n                    {this.state.todos.filter(t => !t.completed).map(todo => <TodoItem key={todo.id}\n                                                                                      todo={todo}\n                                                                                      toggle={this.toggleTodo.bind(this)}/>)}\n                </div>\n                <h2 className=\"labelFinished\">Finished</h2>\n                <div className=\"todoItems\">\n                    {this.state.todos.filter(t => t.completed).map(todo => <TodoItem key={todo.id}\n                                                                                     todo={todo}\n                                                                                     toggle={this.toggleTodo.bind(this)}/>)}\n                </div>\n                <div className=\"newTodo\">\n                    <input type=\"text\"\n                           id=\"todoText\"\n                           placeholder=\"Enter todo...\"/>\n                    <svg className=\"feather right-arrow\"\n                         aria-label=\"Add new todo\"\n                         role=\"button\"\n                         onClick={() => this.addTodo(document.getElementById('todoText').value)}>\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\"/>\n                    </svg>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport class App extends React.Component {\n    state = {login: null};\n\n    componentDidMount() {\n        localforage.getItem('login').then(login => {\n            if (login) {\n                this.setState({login});\n            }\n        });\n\n    }\n\n    login(login) {\n        localforage.setItem('login', login);\n        this.setState({login});\n    }\n\n    logOut() {\n        localforage.clear();\n        this.setState({login: null});\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Header logOut={this.logOut.bind(this)}\n                        login={this.state.login}/>\n                {this.state.login ?\n                    <Content login={this.state.login}/> :\n                    <Login login={this.login.bind(this)}/>}\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n        console.log('Registering');\n      if (isLocalhost) {\n          console.log('Registering');\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n\n          console.log('Registering');\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}