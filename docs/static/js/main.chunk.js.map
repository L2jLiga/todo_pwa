{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this","this","react_default","a","createElement","className","type","checked","props","todo","completed","onChange","toggle","id","join","title","React","Component","Header","login","xlinkHref","aria-label","role","onClick","logOut","Login","_this2","placeholder","document","getElementById","value","Content","state","todos","fetchTodos","_this4","fetch","SERVER_URL","then","response","json","body","result","setState","_this5","localforage","getItem","val","text","getLatestTodos","postTodos","Object","toConsumableArray","concat","length","setItem","navigator","serviceWorker","ready","swRegistration","sync","register","todoID","newTodos","map","_this6","filter","t","App_TodoItem","key","toggleTodo","bind","addTodo","App","_React$Component4","_getPrototypeOf3","_this7","classCallCheck","_len2","arguments","args","Array","_key2","possibleConstructorReturn","getPrototypeOf","call","apply","inherits","createClass","_this8","clear","App_Header","App_Content","App_Login","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"wRAKMA,mLACO,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YACVC,KAAK,WACLC,QAASN,KAAKO,MAAMC,KAAKC,UACzBC,SAAU,kBAAMX,EAAKQ,MAAMI,OAAOZ,EAAKQ,MAAMC,KAAKI,OACzDX,EAAAC,EAAAC,cAAA,QAAMC,UAAW,CAAC,WAAYJ,KAAKO,MAAMC,KAAKC,UAAY,cAAgB,IAAII,KAAK,MAC7Fb,KAAKO,MAAMC,KAAKM,eATCC,IAAMC,WAgBvBC,EAAS,SAACV,GAAD,OACXN,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,QACCG,EAAMW,OACPjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,+CAEnBlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVgB,aAAW,SACXC,KAAK,SACLC,QAASf,EAAMgB,QAChBtB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,iDAMzBK,mLACO,IAAAC,EAAAzB,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,mBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OACLO,GAAG,WACHc,YAAY,QACnBzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACVgB,aAAW,QACXC,KAAK,SACLC,QAAS,kBAAMG,EAAKlB,MAAMW,MAAMS,SAASC,eAAe,YAAYC,SACrE5B,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,kEAbnBJ,IAAMC,WAqBpBc,6MACFC,MAAQ,CAACC,MAAO,uFAGZhC,KAAKiC,kGAOI,IAAAC,EAAAlC,KACTmC,MAAMC,mGAAyBpC,KAAKO,MAAMW,OACrCmB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,QAAU,KAC5BJ,KAAK,SAACL,GAAD,OAAWE,EAAKQ,SAAS,CAACV,qDAGvB,IAAAW,EAAA3C,KACb,OAAO4C,IAAYC,QAAQ,SAASR,KAAK,SAAAS,GACrC,OAAOA,GAAOH,EAAKZ,MAAMC,gFAInBe,yFACU/C,KAAKgD,+BAAnBhB,kBAEAhC,KAAKiD,UAALC,OAAAC,EAAA,EAAAD,CAAmBlB,GAAnBoB,OAAA,CAA0B,CAACtC,MAAOiC,EAAMtC,WAAW,EAAOG,GAAIoB,EAAMqB,OAAS,aAEnF1B,SAASC,eAAe,YAAYC,MAAQ,gLAGhCG,yFACNY,IAAYU,QAAQ,QAAStB,0BAENuB,UAAUC,cAAcC,oBAA/CC,kBAEAA,EAAeC,KAAKC,SAAS,eAInC5D,KAAK0C,SAAS,CAACV,wLAGF6B,2FACO7D,KAAKgD,wBAAnBhB,SAEA8B,EAAW9B,EAAM+B,IAAI,SAAAvD,GAIvB,OAHIA,EAAKI,KAAOiD,IACZrD,EAAKC,WAAaD,EAAKC,WAEpBD,IAGXR,KAAKiD,UAAUa,uIAGV,IAAAE,EAAAhE,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,KAAK+B,MAAMC,MAAMiC,OAAO,SAAAC,GAAC,OAAKA,EAAEzD,YAAWsD,IAAI,SAAAvD,GAAI,OAAIP,EAAAC,EAAAC,cAACgE,EAAD,CAAUC,IAAK5D,EAAKI,GACVJ,KAAMA,EACNG,OAAQqD,EAAKK,WAAWC,KAAKN,QAEnG/D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,KAAK+B,MAAMC,MAAMiC,OAAO,SAAAC,GAAC,OAAIA,EAAEzD,YAAWsD,IAAI,SAAAvD,GAAI,OAAIP,EAAAC,EAAAC,cAACgE,EAAD,CAAUC,IAAK5D,EAAKI,GACVJ,KAAMA,EACNG,OAAQqD,EAAKK,WAAWC,KAAKN,QAElG/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OACLO,GAAG,WACHc,YAAY,kBACnBzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVgB,aAAW,eACXC,KAAK,SACLC,QAAS,kBAAM0C,EAAKO,QAAQ5C,SAASC,eAAe,YAAYC,SACjE5B,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,kEA/EjBJ,IAAMC,WAuFfwD,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAlD,KAAAwE,GAAA,QAAAK,EAAAC,UAAAzB,OAAA0B,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAN,EAAAzB,OAAAgC,EAAA,EAAAhC,CAAAlD,MAAA0E,EAAAxB,OAAAiC,EAAA,EAAAjC,CAAAsB,IAAAY,KAAAC,MAAAX,EAAA,CAAA1E,MAAAoD,OAAA2B,MACIhD,MAAQ,CAACb,MAAO,MADpByD,EAAA,OAAAzB,OAAAoC,EAAA,EAAApC,CAAAsB,EAAAC,GAAAvB,OAAAqC,EAAA,EAAArC,CAAAsB,EAAA,EAAAJ,IAAA,oBAAAvC,MAAA,WAGwB,IAAA2D,EAAAxF,KAChB4C,IAAYC,QAAQ,SAASR,KAAK,SAAAnB,GAC1BA,GACAsE,EAAK9C,SAAS,CAACxB,cAN/B,CAAAkD,IAAA,QAAAvC,MAAA,SAYUX,GACF0B,IAAYU,QAAQ,QAASpC,GAC7BlB,KAAK0C,SAAS,CAACxB,YAdvB,CAAAkD,IAAA,SAAAvC,MAAA,WAkBQe,IAAY6C,QACZzF,KAAK0C,SAAS,CAACxB,MAAO,SAnB9B,CAAAkD,IAAA,SAAAvC,MAAA,WAuBQ,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACuF,EAAD,CAAQnE,OAAQvB,KAAKuB,OAAO+C,KAAKtE,MACzBkB,MAAOlB,KAAK+B,MAAMb,QACzBlB,KAAK+B,MAAMb,MACRjB,EAAAC,EAAAC,cAACwF,EAAD,CAASzE,MAAOlB,KAAK+B,MAAMb,QAC3BjB,EAAAC,EAAAC,cAACyF,EAAD,CAAO1E,MAAOlB,KAAKkB,MAAMoD,KAAKtE,aA7BlDwE,EAAA,CAAyBzD,IAAMC,WCvIzB6E,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9B9C,UAAUC,cACPI,SAASwC,GACT/D,KAAK,SAAAiE,GACJA,EAAaC,cAAgB,WAE3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzE,QACfwB,UAAUC,cAAcmD,YAI1BC,QAAQC,IACN,gHAKER,GAAUA,EAAOS,UACnBT,EAAOS,SAASR,KAMlBM,QAAQC,IAAI,sCAGRR,GAAUA,EAAOU,WACnBV,EAAOU,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3FjEC,IAASC,OAAOlH,EAAAC,EAAAC,cAACiH,EAAD,MAASzF,SAASC,eAAe,SDgB1C,SAAkByE,GACvB,GAAI,kBAAmB9C,UAAW,CAGhC,GADkB,IAAI8D,IAAIC,YAAwBvB,OAAOC,SAASuB,MACpDC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAhD,OAAMkE,YAAN,6BAEPzB,GAiEV,SAAiCO,EAAOC,GAEtClE,MAAMiE,GACH/D,KAAK,SAAAC,GAEJ,IAAMoF,EAAcpF,EAASqF,QAAQC,IAAI,gBAEnB,MAApBtF,EAASuF,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CvE,UAAUC,cAAcC,MAAMpB,KAAK,SAAAiE,GACjCA,EAAayB,aAAa1F,KAAK,WAC7B0D,OAAOC,SAASgC,aAKpB7B,EAAgBC,EAAOC,KAG1BW,MAAM,WACLJ,QAAQC,IACN,mEAtFAoB,CAAwB7B,EAAOC,GAI/B9C,UAAUC,cAAcC,MAAMpB,KAAK,WACjCuE,QAAQC,IACN,+GAMJV,EAAgBC,EAAOC,MCvC/B7C","file":"static/js/main.chunk.js","sourcesContent":["import localforage from 'localforage';\r\nimport React from 'react';\r\n\r\nconst SERVER_URL = 'https://www.jsonstore.io/c1e61fddba68a34eb79eeb97fc56d72df86092d86ad5def5dc25a7252e6cf382';\r\n\r\nclass TodoItem extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"todo\">\r\n                <input className=\"todoCheck\"\r\n                       type=\"checkbox\"\r\n                       checked={this.props.todo.completed}\r\n                       onChange={() => this.props.toggle(this.props.todo.id)}/>\r\n                <span className={['todoText', this.props.todo.completed ? 'todoChecked' : ''].join(' ')}>\r\n\t\t\t\t\t{this.props.todo.title}\r\n\t\t\t\t</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst Header = (props) => (\r\n    <header>\r\n        <h1 className=\"title\">TODO</h1>\r\n        {props.login &&\r\n        <div className=\"icons\">\r\n            <svg className=\"feather\">\r\n                <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#bell-off\"/>\r\n            </svg>\r\n            <svg className=\"feather log-out\"\r\n                 aria-label=\"Logout\"\r\n                 role=\"button\"\r\n                 onClick={props.logOut}>\r\n                <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#log-out\"/>\r\n            </svg>\r\n        </div>}\r\n    </header>\r\n);\r\n\r\nclass Login extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"loginScreen\">\r\n                <h2 className=\"loginLabel\">Enter user name</h2>\r\n                <div className=\"loginControls\">\r\n                    <input type=\"text\"\r\n                           id=\"username\"\r\n                           placeholder=\"Avi\"/>\r\n                    <svg className=\"feather right-arrow login-button\"\r\n                         aria-label=\"Login\"\r\n                         role=\"button\"\r\n                         onClick={() => this.props.login(document.getElementById('username').value)}>\r\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\"/>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Content extends React.Component {\r\n    state = {todos: []};\r\n\r\n    componentDidMount() {\r\n        this.fetchTodos();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    fetchTodos() {\r\n        fetch(SERVER_URL + '/todos/' + this.props.login)\r\n            .then(response => response.json())\r\n            .then(body => body.result || [])\r\n            .then((todos) => this.setState({todos}));\r\n    }\r\n\r\n    getLatestTodos() {\r\n        return localforage.getItem('todos').then(val => {\r\n            return val || this.state.todos;\r\n        });\r\n    }\r\n\r\n    async addTodo(text) {\r\n        const todos = await this.getLatestTodos();\r\n\r\n        await this.postTodos([...todos, {title: text, completed: false, id: todos.length + 1}]);\r\n\r\n        document.getElementById('todoText').value = '';\r\n    }\r\n\r\n    async postTodos(todos) {\r\n        await localforage.setItem('todos', todos);\r\n\r\n        const swRegistration = await navigator.serviceWorker.ready;\r\n\r\n        await swRegistration.sync.register('sync');\r\n\r\n        // allow UI change\r\n        // better way use messages http://craig-russell.co.uk/2016/01/29/service-worker-messaging.html\r\n        this.setState({todos});\r\n    }\r\n\r\n    async toggleTodo(todoID) {\r\n        const todos = await this.getLatestTodos();\r\n\r\n        const newTodos = todos.map(todo => {\r\n            if (todo.id === todoID) {\r\n                todo.completed = !todo.completed;\r\n            }\r\n            return todo;\r\n        });\r\n\r\n        this.postTodos(newTodos);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"todoItems\">\r\n                    {this.state.todos.filter(t => !t.completed).map(todo => <TodoItem key={todo.id}\r\n                                                                                      todo={todo}\r\n                                                                                      toggle={this.toggleTodo.bind(this)}/>)}\r\n                </div>\r\n                <h2 className=\"labelFinished\">Finished</h2>\r\n                <div className=\"todoItems\">\r\n                    {this.state.todos.filter(t => t.completed).map(todo => <TodoItem key={todo.id}\r\n                                                                                     todo={todo}\r\n                                                                                     toggle={this.toggleTodo.bind(this)}/>)}\r\n                </div>\r\n                <div className=\"newTodo\">\r\n                    <input type=\"text\"\r\n                           id=\"todoText\"\r\n                           placeholder=\"Enter todo...\"/>\r\n                    <svg className=\"feather right-arrow\"\r\n                         aria-label=\"Add new todo\"\r\n                         role=\"button\"\r\n                         onClick={() => this.addTodo(document.getElementById('todoText').value)}>\r\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\"/>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport class App extends React.Component {\r\n    state = {login: null};\r\n\r\n    componentDidMount() {\r\n        localforage.getItem('login').then(login => {\r\n            if (login) {\r\n                this.setState({login});\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    login(login) {\r\n        localforage.setItem('login', login);\r\n        this.setState({login});\r\n    }\r\n\r\n    logOut() {\r\n        localforage.clear();\r\n        this.setState({login: null});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Header logOut={this.logOut.bind(this)}\r\n                        login={this.state.login}/>\r\n                {this.state.login ?\r\n                    <Content login={this.state.login}/> :\r\n                    <Login login={this.login.bind(this)}/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}