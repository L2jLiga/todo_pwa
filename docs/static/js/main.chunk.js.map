{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SERVER_URL","TodoItem","_this","this","react_default","a","createElement","className","type","checked","props","todo","completed","onChange","toggle","id","join","title","React","Component","Header","login","xlinkHref","aria-label","role","onClick","logOut","Login","_this2","placeholder","document","getElementById","value","Content","state","todos","fetchTodos","_this4","fetch","then","res","json","obj","setState","result","text","postTodos","Object","toConsumableArray","concat","length","_this5","method","headers","Content-Type","body","JSON","stringify","catch","console","error","todoID","map","_this6","filter","t","App_TodoItem","key","toggleTodo","bind","addTodo","App","_React$Component4","_getPrototypeOf3","_this7","classCallCheck","_len2","arguments","args","Array","_key2","possibleConstructorReturn","getPrototypeOf","call","apply","inherits","createClass","localStorage","getItem","setItem","clear","App_Header","App_Content","App_Login","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","App_App","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2MAEMA,EAAa,4FAEbC,mLACO,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYC,KAAK,WAAWC,QAASN,KAAKO,MAAMC,KAAKC,UAC/DC,SAAU,kBAAMX,EAAKQ,MAAMI,OAAOZ,EAAKQ,MAAMC,KAAKI,OACzDX,EAAAC,EAAAC,cAAA,QAAMC,UAAW,CAAC,WAAYJ,KAAKO,MAAMC,KAAKC,UAAY,cAAgB,IAAII,KAAK,MAC7Fb,KAAKO,MAAMC,KAAKM,eAPCC,IAAMC,WAcvBC,EAAS,SAACV,GAAD,OACXN,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,QACCG,EAAMW,OACPjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,+CAEnBlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBgB,aAAW,SAASC,KAAK,SACrDC,QAASf,EAAMgB,QAChBtB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,iDAMzBK,mLACO,IAAAC,EAAAzB,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,mBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOO,GAAG,WAAWc,YAAY,QAC7CzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAmCgB,aAAW,QAAQC,KAAK,SACrEC,QAAS,kBAAMG,EAAKlB,MAAMW,MAAMS,SAASC,eAAe,YAAYC,SACrE5B,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,kEATnBJ,IAAMC,WAiBpBc,6MACFC,MAAQ,CAACC,MAAO,uFAGZhC,KAAKiC,kDAGI,IAAAC,EAAAlC,KACTmC,MAAMtC,EAAa,UAAYG,KAAKO,MAAMW,OAAOkB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAAQF,KAAK,SAAAG,GAC1EL,EAAKM,SAAS,CAACR,MAAOO,EAAIE,QAAU,uCAIpCC,GACJ1C,KAAK2C,UAALC,OAAAC,EAAA,EAAAD,CAAmB5C,KAAK+B,MAAMC,OAA9Bc,OAAA,CAAqC,CAAEhC,MAAO4B,EAAMjC,WAAW,EAAOG,GAAIZ,KAAK+B,MAAMC,MAAMe,OAAS,wCAG9Ff,GAAM,IAAAgB,EAAAhD,KACZmC,MAAMtC,EAAa,UAAYG,KAAKO,MAAMW,MAAO,CAC7C+B,OAAQ,OACRC,QAAS,CACLC,eAAgB,mCAEpBC,KAAMC,KAAKC,UAAUtB,KACtBI,KAAK,WACJY,EAAKf,aACLN,SAASC,eAAe,YAAYC,MAAQ,KAC7C0B,MAAMC,QAAQC,0CAGVC,GACP,IAAI1B,EAAQhC,KAAK+B,MAAMC,MAAM2B,IAAI,SAAAnD,GAI7B,OAHIA,EAAKI,KAAO8C,IACZlD,EAAKC,WAAaD,EAAKC,WAEpBD,IAEXR,KAAK2C,UAAUX,oCAGV,IAAA4B,EAAA5D,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,KAAK+B,MAAMC,MAAM6B,OAAO,SAAAC,GAAC,OAAKA,EAAErD,YAAWkD,IAAI,SAAAnD,GAAI,OAAIP,EAAAC,EAAAC,cAAC4D,EAAD,CAAUC,IAAKxD,EAAKI,GAAIJ,KAAMA,EACpBG,OAAQiD,EAAKK,WAAWC,KAAKN,QAEnG3D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,KAAK+B,MAAMC,MAAM6B,OAAO,SAAAC,GAAC,OAAIA,EAAErD,YAAWkD,IAAI,SAAAnD,GAAI,OAAIP,EAAAC,EAAAC,cAAC4D,EAAD,CAAUC,IAAKxD,EAAKI,GAAIJ,KAAMA,EACpBG,OAAQiD,EAAKK,WAAWC,KAAKN,QAElG3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOO,GAAG,WAAWc,YAAY,kBAC7CzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBgB,aAAW,eAAeC,KAAK,SAC/DC,QAAS,kBAAMsC,EAAKO,QAAQxC,SAASC,eAAe,YAAYC,SACjE5B,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,kEAxDjBJ,IAAMC,WAgEfoD,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAA5C,KAAAoE,GAAA,QAAAK,EAAAC,UAAA3B,OAAA4B,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAN,EAAA3B,OAAAkC,EAAA,EAAAlC,CAAA5C,MAAAsE,EAAA1B,OAAAmC,EAAA,EAAAnC,CAAAwB,IAAAY,KAAAC,MAAAX,EAAA,CAAAtE,MAAA8C,OAAA6B,MACI5C,MAAQ,CAACb,MAAO,MADpBqD,EAAA,OAAA3B,OAAAsC,EAAA,EAAAtC,CAAAwB,EAAAC,GAAAzB,OAAAuC,EAAA,EAAAvC,CAAAwB,EAAA,EAAAJ,IAAA,oBAAAnC,MAAA,WAIQ,IAAMX,EAAQkE,aAAaC,QAAQ,SAC/BnE,GACAlB,KAAKwC,SAAS,CAACtB,YAN3B,CAAA8C,IAAA,QAAAnC,MAAA,SAUUX,GACFkE,aAAaE,QAAQ,QAASpE,GAC9BlB,KAAKwC,SAAS,CAACtB,YAZvB,CAAA8C,IAAA,SAAAnC,MAAA,WAgBQuD,aAAaG,QACbvF,KAAKwC,SAAS,CAACtB,MAAO,SAjB9B,CAAA8C,IAAA,SAAAnC,MAAA,WAqBQ,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACqF,EAAD,CAAQjE,OAAQvB,KAAKuB,OAAO2C,KAAKlE,MAAOkB,MAAOlB,KAAK+B,MAAMb,QACzDlB,KAAK+B,MAAMb,MACRjB,EAAAC,EAAAC,cAACsF,EAAD,CAASvE,MAAOlB,KAAK+B,MAAMb,QAC3BjB,EAAAC,EAAAC,cAACuF,EAAD,CAAOxE,MAAOlB,KAAKkB,MAAMgD,KAAKlE,aA1BlDoE,EAAA,CAAyBrD,IAAMC,WCvGzB2E,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA0CN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT9D,KAAK,SAAAmE,GACJA,EAAaC,cAAgB,WAE3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1E,QACfqE,UAAUC,cAAcO,YAI1BpD,QAAQqD,IACN,gHAKEV,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB/C,QAAQqD,IAAI,sCAGRV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BhD,MAAM,SAAAE,GACLD,QAAQC,MAAM,4CAA6CA,KC/FjEuD,IAASC,OAAOhH,EAAAC,EAAAC,cAAC+G,EAAD,MAASvF,SAASC,eAAe,SDgB1C,SAAkBuE,GACvB,GAAI,kBAAmBC,UAAW,CAGhC,GADkB,IAAIe,IAAIC,YAAwBvB,OAAOC,SAASuB,MACpDC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAApD,OAAMsE,YAAN,6BAET5D,QAAQqD,IAAI,eACVlB,GACAnC,QAAQqD,IAAI,eAmEtB,SAAiCX,EAAOC,GAEtChE,MAAM+D,GACH9D,KAAK,SAAAoF,GAEJ,IAAMC,EAAcD,EAAStE,QAAQwE,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAMzF,KAAK,SAAAmE,GACjCA,EAAauB,aAAa1F,KAAK,WAC7ByD,OAAOC,SAASiC,aAKpB9B,EAAgBC,EAAOC,KAG1B5C,MAAM,WACLC,QAAQqD,IACN,mEAxFAmB,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAMzF,KAAK,WACjCoB,QAAQqD,IACN,gHAMFrD,QAAQqD,IAAI,eAEdZ,EAAgBC,EAAOC,OC3C/BE","file":"static/js/main.chunk.js","sourcesContent":["import React from 'react';\n\nconst SERVER_URL = 'https://www.jsonstore.io/c1e61fddba68a34eb79eeb97fc56d72df86092d86ad5def5dc25a7252e6cf382';\n\nclass TodoItem extends React.Component {\n    render() {\n        return (\n            <div className=\"todo\">\n                <input className=\"todoCheck\" type=\"checkbox\" checked={this.props.todo.completed}\n                       onChange={() => this.props.toggle(this.props.todo.id)} />\n                <span className={['todoText', this.props.todo.completed ? 'todoChecked' : ''].join(' ')}>\n\t\t\t\t\t{this.props.todo.title}\n\t\t\t\t</span>\n            </div>\n        )\n    }\n}\n\nconst Header = (props) => (\n    <header>\n        <h1 className=\"title\">TODO</h1>\n        {props.login &&\n        <div className=\"icons\">\n            <svg className=\"feather\">\n                <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#bell-off\" />\n            </svg>\n            <svg className=\"feather log-out\" aria-label=\"Logout\" role=\"button\"\n                 onClick={props.logOut}>\n                <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#log-out\" />\n            </svg>\n        </div>}\n    </header>\n)\n\nclass Login extends React.Component {\n    render() {\n        return (\n            <div className=\"loginScreen\">\n                <h2 className=\"loginLabel\">Enter user name</h2>\n                <div className=\"loginControls\">\n                    <input type=\"text\" id=\"username\" placeholder=\"Avi\" />\n                    <svg className=\"feather right-arrow login-button\" aria-label=\"Login\" role=\"button\"\n                         onClick={() => this.props.login(document.getElementById('username').value)}>\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\" />\n                    </svg>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Content extends React.Component {\n    state = {todos: []}\n\n    componentDidMount() {\n        this.fetchTodos()\n    }\n\n    fetchTodos() {\n        fetch(SERVER_URL + '/todos/' + this.props.login).then(res => res.json()).then(obj => {\n            this.setState({todos: obj.result || []})\n        })\n    }\n\n    addTodo(text) {\n        this.postTodos([...this.state.todos, { title: text, completed: false, id: this.state.todos.length + 1 }])\n    }\n\n    postTodos(todos){\n        fetch(SERVER_URL + '/todos/' + this.props.login, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n            },\n            body: JSON.stringify(todos)\n        }).then(() => {\n            this.fetchTodos()\n            document.getElementById('todoText').value = ''\n        }).catch(console.error)\n    }\n\n    toggleTodo(todoID) {\n        let todos = this.state.todos.map(todo => {\n            if (todo.id === todoID) {\n                todo.completed = !todo.completed\n            }\n            return todo\n        })\n        this.postTodos(todos)\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <div className=\"todoItems\">\n                    {this.state.todos.filter(t => !t.completed).map(todo => <TodoItem key={todo.id} todo={todo}\n                                                                                      toggle={this.toggleTodo.bind(this)} />)}\n                </div>\n                <h2 className=\"labelFinished\">Finished</h2>\n                <div className=\"todoItems\">\n                    {this.state.todos.filter(t => t.completed).map(todo => <TodoItem key={todo.id} todo={todo}\n                                                                                     toggle={this.toggleTodo.bind(this)} />)}\n                </div>\n                <div className=\"newTodo\">\n                    <input type=\"text\" id=\"todoText\" placeholder=\"Enter todo...\" />\n                    <svg className=\"feather right-arrow\" aria-label=\"Add new todo\" role=\"button\"\n                         onClick={() => this.addTodo(document.getElementById('todoText').value)}>\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\" />\n                    </svg>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport class App extends React.Component {\n    state = {login: null}\n\n    componentDidMount() {\n        const login = localStorage.getItem('login')\n        if (login) {\n            this.setState({login})\n        }\n    }\n\n    login(login) {\n        localStorage.setItem('login', login)\n        this.setState({login})\n    }\n\n    logOut() {\n        localStorage.clear()\n        this.setState({login: null})\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Header logOut={this.logOut.bind(this)} login={this.state.login} />\n                {this.state.login ?\n                    <Content login={this.state.login} /> :\n                    <Login login={this.login.bind(this)} />}\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n        console.log('Registering');\n      if (isLocalhost) {\n          console.log('Registering');\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n\n          console.log('Registering');\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}