{"version":3,"sources":["components/Todo-item.js","components/Content.js","components/Header.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","text","window","prompt","props","todo","title","length","update","id","_this","react_default","a","createElement","className","type","checked","completed","onChange","toggle","join","onClick","openEditorWindow","bind","remove","Component","Content","_getPrototypeOf2","_len","args","Array","_key","call","concat","state","todos","fetchTodos","_this2","fetch","SERVER_URL","login","then","response","json","body","result","setState","_this3","localforage","getItem","val","_addTodo","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","getLatestTodos","sent","postTodos","toConsumableArray","document","getElementById","stop","_x","_removeTodo","_callee2","todoId","_context2","filter","_ref","_x2","_postTodos","_callee3","swRegistration","_context3","setItem","navigator","serviceWorker","ready","sync","register","_x3","_toggleTodo","_callee4","todoID","newTodos","_context4","map","_x4","_updateTodo","_callee5","_context5","_x5","_x6","_this4","t","Todo_item_TodoItem","toggleTodo","updateTodo","removeTodo","placeholder","aria-label","role","addTodo","xlinkHref","Header","logOut","Login","App","clear","Header_Header","Content_Content","Login_Login","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Todo-item.css';\r\n\r\nexport class TodoItem extends Component {\r\n    openEditorWindow() {\r\n        const text = window.prompt('Update ToDo', this.props.todo.title);\r\n\r\n        if (typeof text !== 'string' || !text.length || text === this.props.todo.title) return;\r\n\r\n        this.props.update(this.props.todo.id, text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo\">\r\n                <input className=\"todoCheck\"\r\n                       type=\"checkbox\"\r\n                       checked={this.props.todo.completed}\r\n                       onChange={() => this.props.toggle(this.props.todo.id)}/>\r\n                <span className={['todoText', this.props.todo.completed ? 'todoChecked' : ''].join(' ')}\r\n                      onClick={this.openEditorWindow.bind(this)}>\r\n\t\t\t\t\t{this.props.todo.title}\r\n\t\t\t\t</span>\r\n                <span className=\"todoDelete\"\r\n                      onClick={() => this.props.remove(this.props.todo.id)}>\r\n                    Delete\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import localforage from 'localforage';\r\nimport React, { Component } from 'react';\r\nimport { SERVER_URL } from '../registry';\r\nimport './Content.css';\r\nimport { TodoItem } from './Todo-item';\r\n\r\nexport class Content extends Component {\r\n    state = {todos: []};\r\n\r\n    componentDidMount() {\r\n        this.fetchTodos();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    fetchTodos() {\r\n        fetch(SERVER_URL + '/todos/' + this.props.login)\r\n            .then(response => response.json())\r\n            .then(body => body.result || [])\r\n            .then((todos) => this.setState({todos}));\r\n    }\r\n\r\n    getLatestTodos() {\r\n        return localforage.getItem('todos').then(val => {\r\n            return val || this.state.todos;\r\n        });\r\n    }\r\n\r\n    async addTodo(text) {\r\n        const todos = await this.getLatestTodos();\r\n\r\n        await this.postTodos([...todos, {title: text, completed: false, id: todos.length + 1}]);\r\n\r\n        document.getElementById('todoText').value = '';\r\n    }\r\n\r\n    async removeTodo(todoId) {\r\n        const todos = await this.getLatestTodos();\r\n\r\n        await this.postTodos(todos.filter(({id}) => id !== todoId));\r\n    }\r\n\r\n    async postTodos(todos) {\r\n        await localforage.setItem('todos', todos);\r\n\r\n        const swRegistration = await navigator.serviceWorker.ready;\r\n\r\n        await swRegistration.sync.register('sync');\r\n\r\n        // allow UI change\r\n        // better way use messages http://craig-russell.co.uk/2016/01/29/service-worker-messaging.html\r\n        this.setState({todos});\r\n    }\r\n\r\n    async toggleTodo(todoID) {\r\n        const todos = await this.getLatestTodos();\r\n\r\n        const newTodos = todos.map(todo => {\r\n            if (todo.id === todoID) {\r\n                todo.completed = !todo.completed;\r\n            }\r\n            return todo;\r\n        });\r\n\r\n        this.postTodos(newTodos);\r\n    }\r\n\r\n    async updateTodo(todoID, text) {\r\n        const todos = await this.getLatestTodos();\r\n\r\n        const newTodos = todos.map(todo => {\r\n            if (todo.id === todoID) {\r\n                todo.title = text;\r\n            }\r\n            return todo;\r\n        });\r\n\r\n        this.postTodos(newTodos);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='content-wrapper'>\r\n                <div className=\"content\">\r\n                    <div className=\"todoItems\">\r\n                        {this.state.todos.filter(t => !t.completed).map(todo => <TodoItem key={todo.id}\r\n                                                                                          todo={todo}\r\n                                                                                          toggle={this.toggleTodo.bind(this)}\r\n                                                                                          update={this.updateTodo.bind(this)}\r\n                                                                                          remove={this.removeTodo.bind(this)}/>)}\r\n                    </div>\r\n                    <h2 className=\"labelFinished\">Finished</h2>\r\n                    <div className=\"todoItems\">\r\n                        {this.state.todos.filter(t => t.completed).map(todo => <TodoItem key={todo.id}\r\n                                                                                         todo={todo}\r\n                                                                                         toggle={this.toggleTodo.bind(this)}\r\n                                                                                         update={this.updateTodo.bind(this)}\r\n                                                                                         remove={this.removeTodo.bind(this)}/>)}\r\n                    </div>\r\n                    <div className=\"newTodo\">\r\n                        <input type=\"text\"\r\n                               id=\"todoText\"\r\n                               placeholder=\"Enter todo...\"/>\r\n                        <svg className=\"feather right-arrow\"\r\n                             aria-label=\"Add new todo\"\r\n                             role=\"button\"\r\n                             onClick={() => this.addTodo(document.getElementById('todoText').value)}>\r\n                            <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\"/>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1 className=\"title\">TODO</h1>\r\n                {this.props.login &&\r\n                <div className=\"icons\">\r\n                    <svg className=\"feather\">\r\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#bell-off\"/>\r\n                    </svg>\r\n                    <svg className=\"feather log-out\"\r\n                         aria-label=\"Logout\"\r\n                         role=\"button\"\r\n                         onClick={this.props.logOut}>\r\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#log-out\"/>\r\n                    </svg>\r\n                </div>}\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"loginScreen\">\r\n                <h2 className=\"loginLabel\">Enter user name</h2>\r\n                <div className=\"loginControls\">\r\n                    <input type=\"text\"\r\n                           id=\"username\"\r\n                           placeholder=\"Avi\"/>\r\n                    <svg className=\"feather right-arrow login-button\"\r\n                         aria-label=\"Login\"\r\n                         role=\"button\"\r\n                         onClick={() => this.props.login(document.getElementById('username').value)}>\r\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\"/>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import localforage from 'localforage';\r\nimport React, { Component } from 'react';\r\nimport { Content, Header, Login } from './components';\r\n\r\nexport class App extends Component {\r\n    state = {login: null};\r\n\r\n    componentDidMount() {\r\n        localforage.getItem('login').then(login => {\r\n            if (login) {\r\n                this.setState({login});\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    login(login) {\r\n        localforage.setItem('login', login);\r\n        this.setState({login});\r\n    }\r\n\r\n    logOut() {\r\n        localforage.clear();\r\n        this.setState({login: null});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Header logOut={this.logOut.bind(this)}\r\n                        login={this.state.login}/>\r\n                {this.state.login ?\r\n                    <Content login={this.state.login}/> :\r\n                    <Login login={this.login.bind(this)}/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if ('serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}