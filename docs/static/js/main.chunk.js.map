{"version":3,"sources":["components/Todo-item.js","components/Content.js","components/Header.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","react_default","a","createElement","className","type","checked","props","todo","completed","onChange","toggle","id","join","title","Component","Content","_getPrototypeOf2","_len","length","args","Array","_key","call","concat","state","todos","fetchTodos","_this2","fetch","SERVER_URL","login","then","response","json","body","result","setState","_this3","localforage","getItem","val","_addTodo","asyncToGenerator","regenerator_default","mark","_callee","text","wrap","_context","prev","next","getLatestTodos","sent","postTodos","toConsumableArray","document","getElementById","stop","_x","_postTodos","_callee2","swRegistration","_context2","setItem","navigator","serviceWorker","ready","sync","register","_x2","_toggleTodo","_callee3","todoID","newTodos","_context3","map","_x3","_this4","filter","t","Todo_item_TodoItem","toggleTodo","bind","placeholder","aria-label","role","onClick","addTodo","xlinkHref","Header","logOut","Login","App","clear","Header_Header","Content_Content","Login_Login","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Todo-item.css';\n\nexport class TodoItem extends Component {\n    render() {\n        return (\n            <div className=\"todo\">\n                <input className=\"todoCheck\"\n                       type=\"checkbox\"\n                       checked={this.props.todo.completed}\n                       onChange={() => this.props.toggle(this.props.todo.id)}/>\n                <span className={['todoText', this.props.todo.completed ? 'todoChecked' : ''].join(' ')}>\n\t\t\t\t\t{this.props.todo.title}\n\t\t\t\t</span>\n            </div>\n        );\n    }\n}\n","import localforage from 'localforage';\nimport React, { Component } from 'react';\nimport { SERVER_URL } from '../registry';\nimport { TodoItem } from './Todo-item';\nimport './Content.css';\n\nexport class Content extends Component {\n    state = {todos: []};\n\n    componentDidMount() {\n        this.fetchTodos();\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    fetchTodos() {\n        fetch(SERVER_URL + '/todos/' + this.props.login)\n            .then(response => response.json())\n            .then(body => body.result || [])\n            .then((todos) => this.setState({todos}));\n    }\n\n    getLatestTodos() {\n        return localforage.getItem('todos').then(val => {\n            return val || this.state.todos;\n        });\n    }\n\n    async addTodo(text) {\n        const todos = await this.getLatestTodos();\n\n        await this.postTodos([...todos, {title: text, completed: false, id: todos.length + 1}]);\n\n        document.getElementById('todoText').value = '';\n    }\n\n    async postTodos(todos) {\n        await localforage.setItem('todos', todos);\n\n        const swRegistration = await navigator.serviceWorker.ready;\n\n        await swRegistration.sync.register('sync');\n\n        // allow UI change\n        // better way use messages http://craig-russell.co.uk/2016/01/29/service-worker-messaging.html\n        this.setState({todos});\n    }\n\n    async toggleTodo(todoID) {\n        const todos = await this.getLatestTodos();\n\n        const newTodos = todos.map(todo => {\n            if (todo.id === todoID) {\n                todo.completed = !todo.completed;\n            }\n            return todo;\n        });\n\n        this.postTodos(newTodos);\n    }\n\n    render() {\n        return (\n            <div className='content-wrapper'>\n                <div className=\"content\">\n                    <div className=\"todoItems\">\n                        {this.state.todos.filter(t => !t.completed).map(todo => <TodoItem key={todo.id}\n                                                                                          todo={todo}\n                                                                                          toggle={this.toggleTodo.bind(this)}/>)}\n                    </div>\n                    <h2 className=\"labelFinished\">Finished</h2>\n                    <div className=\"todoItems\">\n                        {this.state.todos.filter(t => t.completed).map(todo => <TodoItem key={todo.id}\n                                                                                         todo={todo}\n                                                                                         toggle={this.toggleTodo.bind(this)}/>)}\n                    </div>\n                    <div className=\"newTodo\">\n                        <input type=\"text\"\n                               id=\"todoText\"\n                               placeholder=\"Enter todo...\"/>\n                        <svg className=\"feather right-arrow\"\n                             aria-label=\"Add new todo\"\n                             role=\"button\"\n                             onClick={() => this.addTodo(document.getElementById('todoText').value)}>\n                            <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\"/>\n                        </svg>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nexport class Header extends Component {\n    render() {\n        return (\n            <header>\n                <h1 className=\"title\">TODO</h1>\n                {this.props.login &&\n                <div className=\"icons\">\n                    <svg className=\"feather\">\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#bell-off\"/>\n                    </svg>\n                    <svg className=\"feather log-out\"\n                         aria-label=\"Logout\"\n                         role=\"button\"\n                         onClick={this.props.logOut}>\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#log-out\"/>\n                    </svg>\n                </div>}\n            </header>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nexport class Login extends Component {\n    render() {\n        return (\n            <div className=\"loginScreen\">\n                <h2 className=\"loginLabel\">Enter user name</h2>\n                <div className=\"loginControls\">\n                    <input type=\"text\"\n                           id=\"username\"\n                           placeholder=\"Avi\"/>\n                    <svg className=\"feather right-arrow login-button\"\n                         aria-label=\"Login\"\n                         role=\"button\"\n                         onClick={() => this.props.login(document.getElementById('username').value)}>\n                        <use xlinkHref=\"/todo_pwa/img/feather-sprite.svg#arrow-right-circle\"/>\n                    </svg>\n                </div>\n            </div>\n        );\n    }\n}\n","import localforage from 'localforage';\r\nimport React, { Component } from 'react';\r\nimport { Content, Header, Login } from './components';\r\n\r\nexport class App extends Component {\r\n    state = {login: null};\r\n\r\n    componentDidMount() {\r\n        localforage.getItem('login').then(login => {\r\n            if (login) {\r\n                this.setState({login});\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    login(login) {\r\n        localforage.setItem('login', login);\r\n        this.setState({login});\r\n    }\r\n\r\n    logOut() {\r\n        localforage.clear();\r\n        this.setState({login: null});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Header logOut={this.logOut.bind(this)}\r\n                        login={this.state.login}/>\r\n                {this.state.login ?\r\n                    <Content login={this.state.login}/> :\r\n                    <Login login={this.login.bind(this)}/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if ('serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}